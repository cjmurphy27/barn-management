import streamlit as st
import requests
import json

st.set_page_config(page_title="Barn Lady", layout="wide")
st.title("üê¥ Barn Lady - Multi-Barn Horse Management")

API_BASE_URL = "http://localhost:8000/api/v1"

# Initialize session state
if 'horses' not in st.session_state:
    st.session_state.horses = []
if 'selected_horse_id' not in st.session_state:
    st.session_state.selected_horse_id = None

def load_horses():
    """Load horses from API"""
    try:
        response = requests.get(f"{API_BASE_URL}/horses/", timeout=10)
        if response.status_code == 200:
            st.session_state.horses = response.json()
            return True
        else:
            st.error(f"API Error: {response.status_code}")
            return False
    except Exception as e:
        st.error(f"Error loading horses: {e}")
        return False

def create_horse(horse_data):
    """Create a new horse"""
    try:
        response = requests.post(f"{API_BASE_URL}/horses/", 
json=horse_data, timeout=10)
        if response.status_code == 200:
            st.success(f"‚úÖ Successfully added {horse_data['name']}!")
            load_horses()  # Refresh the list
            return True
        else:
            st.error(f"Error creating horse: {response.status_code}")
            return False
    except Exception as e:
        st.error(f"Error: {e}")
        return False

def update_horse(horse_id, horse_data):
    """Update an existing horse"""
    try:
        response = requests.put(f"{API_BASE_URL}/horses/{horse_id}", 
json=horse_data, timeout=10)
        if response.status_code == 200:
            st.success(f"‚úÖ Successfully updated {horse_data['name']}!")
            load_horses()  # Refresh the list
            return True
        else:
            st.error(f"Error updating horse: {response.status_code}")
            return False
    except Exception as e:
        st.error(f"Error: {e}")
        return False

def delete_horse(horse_id, horse_name):
    """Delete a horse"""
    try:
        response = requests.delete(f"{API_BASE_URL}/horses/{horse_id}", 
timeout=10)
        if response.status_code == 200:
            st.success(f"‚úÖ Successfully removed {horse_name}")
            load_horses()  # Refresh the list
            return True
        else:
            st.error(f"Error deleting horse: {response.status_code}")
            return False
    except Exception as e:
        st.error(f"Error: {e}")
        return False

def ask_ai_question(question):
    """Ask AI a question about horses"""
    try:
        response = requests.post(f"{API_BASE_URL}/horses/ask", 
                               json={"question": question}, timeout=15)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"AI Error: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Error asking AI: {e}")
        return None

# Create tabs for different sections
tab1, tab2, tab3, tab4 = st.tabs(["üê¥ Your Horses", "‚ûï Add Horse", "ü§ñ 
Ask AI", "‚öôÔ∏è Settings"])

with tab1:
    st.header("Your Horses")
    
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("üöÄ Load/Refresh Horses", type="primary"):
            if load_horses():
                st.balloons()
    
    with col2:
        if st.button("üîç Test API Connection"):
            try:
                response = requests.get("http://localhost:8000/health", 
timeout=5)
                if response.status_code == 200:
                    health_data = response.json()
                    st.success(f"‚úÖ API is healthy! Version: 
{health_data.get('version', 'Unknown')}")
                else:
                    st.error(f"‚ùå API returned: {response.status_code}")
            except Exception as e:
                st.error(f"‚ùå Cannot reach API: {e}")
    
    # Display horses
    if st.session_state.horses:
        st.success(f"üê¥ Found {len(st.session_state.horses)} horses in 
your barn!")
        
        for horse in st.session_state.horses:
            with st.container():
                col1, col2, col3 = st.columns([4, 1, 1])
                
                with col1:
                    st.subheader(f"üê¥ {horse['name']}")
                    st.write(f"**Breed:** {horse['breed']} | **Age:** 
{horse['age_display']} | **Color:** {horse['color']}")
                    st.write(f"**Gender:** {horse['gender']} | **Owner:** 
{horse['owner_name']}")
                    if horse.get('current_location'):
                        st.write(f"üìç {horse['current_location']}")
                    
                    # Status badges
                    status_color = {"Good": "üü¢", "Excellent": "üü¢", 
"Fair": "üü°", "Poor": "üî¥"}
                    status_icon = 
status_color.get(horse['current_health_status'], "‚ö™")
                    st.write(f"**Health:** {status_icon} 
{horse['current_health_status']}")
                    
                    if horse.get('is_for_sale'):
                        st.write("üè∑Ô∏è **For Sale**")
                    if horse.get('is_retired'):
                        st.write("üèñÔ∏è **Retired**")
                
                with col2:
                    if st.button(f"‚úèÔ∏è Edit", key=f"edit_{horse['id']}"):
                        st.session_state.selected_horse_id = horse['id']
                        st.rerun()
                
                with col3:
                    if st.button(f"üóëÔ∏è Delete", 
key=f"delete_{horse['id']}", type="secondary"):
                        if 
st.session_state.get(f"confirm_delete_{horse['id']}", False):
                            delete_horse(horse['id'], horse['name'])
                            
st.session_state[f"confirm_delete_{horse['id']}"] = False
                        else:
                            
st.session_state[f"confirm_delete_{horse['id']}"] = True
                            st.warning(f"Click again to confirm deletion 
of {horse['name']}")
                            st.rerun()
                
                st.markdown("---")
        
        # Edit horse form (appears when edit is clicked)
        if st.session_state.selected_horse_id:
            selected_horse = next((h for h in st.session_state.horses if 
h['id'] == st.session_state.selected_horse_id), None)
            if selected_horse:
                st.subheader(f"‚úèÔ∏è Edit {selected_horse['name']}")
                
                with st.form(f"edit_horse_form"):
                    col1, col2 = st.columns(2)
                    with col1:
                        name = st.text_input("Horse Name", 
value=selected_horse['name'])
                        breed = st.text_input("Breed", 
value=selected_horse['breed'])
                        age = st.text_input("Age Display", 
value=selected_horse['age_display'])
                        color = st.text_input("Color", 
value=selected_horse['color'])
                    
                    with col2:
                        gender = st.selectbox("Gender", ["Mare", 
"Stallion", "Gelding"], 
                                            index=["Mare", "Stallion", 
"Gelding"].index(selected_horse['gender']))
                        health = st.selectbox("Health Status", 
["Excellent", "Good", "Fair", "Poor"],
                                            index=["Excellent", "Good", 
"Fair", "Poor"].index(selected_horse['current_health_status']))
                        location = st.text_input("Current Location", 
value=selected_horse['current_location'])
                        owner = st.text_input("Owner Name", 
value=selected_horse['owner_name'])
                    
                    col3, col4 = st.columns(2)
                    with col3:
                        for_sale = st.checkbox("For Sale", 
value=selected_horse['is_for_sale'])
                    with col4:
                        retired = st.checkbox("Retired", 
value=selected_horse['is_retired'])
                    
                    col5, col6 = st.columns(2)
                    with col5:
                        if st.form_submit_button("üíæ Save Changes", 
type="primary"):
                            horse_data = {
                                "name": name,
                                "breed": breed,
                                "age_display": age,
                                "color": color,
                                "gender": gender,
                                "current_health_status": health,
                                "current_location": location,
                                "owner_name": owner,
                                "is_for_sale": for_sale,
                                "is_retired": retired
                            }
                            if update_horse(selected_horse['id'], 
horse_data):
                                st.session_state.selected_horse_id = None
                                st.rerun()
                    
                    with col6:
                        if st.form_submit_button("‚ùå Cancel"):
                            st.session_state.selected_horse_id = None
                            st.rerun()
    else:
        st.info("üëÜ Click 'Load/Refresh Horses' to see your horses!")

with tab2:
    st.header("‚ûï Add New Horse")
    
    with st.form("add_horse_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Horse Name *", placeholder="e.g., 
Thunder Bay")
            breed = st.text_input("Breed *", placeholder="e.g., 
Thoroughbred")
            age = st.text_input("Age Display *", placeholder="e.g., 8 
years, 3 months")
            color = st.text_input("Color *", placeholder="e.g., Bay")
        
        with col2:
            gender = st.selectbox("Gender *", ["Mare", "Stallion", 
"Gelding"])
            health = st.selectbox("Health Status *", ["Excellent", "Good", 
"Fair", "Poor"])
            location = st.text_input("Current Location *", 
placeholder="e.g., Meadowbrook Farm")
            owner = st.text_input("Owner Name *", placeholder="e.g., Sarah 
Johnson")
        
        col3, col4 = st.columns(2)
        with col3:
            for_sale = st.checkbox("For Sale")
        with col4:
            retired = st.checkbox("Retired")
        
        if st.form_submit_button("üê¥ Add Horse", type="primary"):
            if name and breed and age and color and gender and health and 
location and owner:
                horse_data = {
                    "name": name,
                    "breed": breed,
                    "age_display": age,
                    "color": color,
                    "gender": gender,
                    "current_health_status": health,
                    "current_location": location,
                    "owner_name": owner,
                    "is_for_sale": for_sale,
                    "is_retired": retired
                }
                create_horse(horse_data)
            else:
                st.error("Please fill in all required fields marked with 
*")

with tab3:
    st.header("ü§ñ Ask AI About Your Horses")
    st.write("Ask questions about horse care, health, training, or 
anything else!")
    
    # Show current horse count
    if st.session_state.horses:
        st.info(f"You have {len(st.session_state.horses)} horses in your 
barn")
    
    question = st.text_area("What would you like to know about your 
horses?", 
                           placeholder="e.g., 'What should I feed my 
horses?' or 'How can I improve Thunder Bay's training?'")
    
    if st.button("ü§ñ Ask AI", type="primary") and question:
        with st.spinner("ü§î AI is thinking..."):
            ai_response = ask_ai_question(question)
            if ai_response:
                st.success("ü§ñ AI Response:")
                st.write(ai_response['answer'])
                st.caption(f"Based on {ai_response['horse_count']} horses 
in your barn")

with tab4:
    st.header("‚öôÔ∏è Settings & Information")
    
    st.subheader("API Information")
    st.code(f"API Base URL: {API_BASE_URL}")
    
    st.subheader("Features")
    features = [
        "‚úÖ View all horses",
        "‚úÖ Add new horses", 
        "‚úÖ Edit horse information",
        "‚úÖ Delete horses",
        "‚úÖ AI Q&A about horse care",
        "üîÑ Database integration (coming soon)",
        "üîê Multi-barn authentication (coming soon)"
    ]
    for feature in features:
        st.write(feature)
    
    st.subheader("Quick Actions")
    if st.button("üîÑ Refresh All Data"):
        load_horses()
        st.success("Data refreshed!")
