# Replace your frontend/app.py with this content
import streamlit as st
import requests
import json
from datetime import datetime
from frontend.auth_component import require_auth, make_api_request, auth

# Configure Streamlit page
st.set_page_config(
    page_title="Barn Lady - Multi-Barn Horse Management",
    page_icon="üê¥",
    layout="wide"
)

def load_horses():
    """Load horses for current organization"""
    try:
        response = make_api_request('GET', '/api/v1/horses/')
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 401:
            st.error("Authentication required. Please login again.")
            auth.clear_auth_token()
            st.rerun()
        else:
            st.error(f"Failed to load horses: {response.status_code} - 
{response.text}")
            return []
    except requests.RequestException as e:
        st.error(f"Failed to connect to API: {e}")
        return []

def create_horse(horse_data):
    """Create a new horse"""
    try:
        response = make_api_request('POST', '/api/v1/horses/', json=horse_data)
        if response.status_code == 201:
            return response.json()
        elif response.status_code == 401:
            st.error("Authentication required. Please login again.")
            auth.clear_auth_token()
            st.rerun()
        else:
            error_detail = response.json().get('detail', 'Unknown error') if 
response.text else 'Unknown error'
            st.error(f"Failed to create horse: {error_detail}")
            return None
    except requests.RequestException as e:
        st.error(f"Failed to connect to API: {e}")
        return None

def get_ai_analysis(horse_info, question):
    """Get AI analysis for a horse"""
    try:
        # First get the horse data with authentication
        horse_response = make_api_request('GET', 
f'/api/v1/horses/{horse_info["id"]}')
        if horse_response.status_code != 200:
            st.error("Failed to get horse details for AI analysis")
            return None
            
        horse_data = horse_response.json()
        
        # Then call AI analysis
        ai_data = {
            "horse_info": horse_data,
            "question": question
        }
        response = make_api_request('POST', '/api/v1/ai/analyze-horse', 
json=ai_data)
        
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 401:
            st.error("Authentication required. Please login again.")
            auth.clear_auth_token()
            st.rerun()
        else:
            error_detail = response.json().get('detail', 'Unknown error') if 
response.text else 'Unknown error'
            st.error(f"AI analysis failed: {error_detail}")
            return None
    except requests.RequestException as e:
        st.error(f"Failed to connect to API: {e}")
        return None

def main():
    """Main application"""
    
    # Check authentication - this will show login page if not authenticated
    if not require_auth():
        return
    
    # User is authenticated - show main app
    st.title("üê¥ Barn Lady - Multi-Barn Horse Management System")
    
    # Get current user info
    user_info = st.session_state.get('user_info', {})
    current_org = user_info.get('current_org', {})
    
    if current_org:
        st.markdown(f"**Current Barn:** {current_org.get('org_name', 'Unknown')}")
        st.markdown(f"**Your Role:** {current_org.get('role', 'member').title()}")
    
    # Main navigation
    tab1, tab2, tab3 = st.tabs(["üè† Horse Directory", "‚ûï Add Horse", "ü§ñ AI 
Assistant"])
    
    with tab1:
        st.header("Horse Directory")
        
        # Search functionality
        col1, col2 = st.columns([3, 1])
        with col1:
            search_term = st.text_input("üîç Search horses by name or breed:", 
placeholder="Enter search term...")
        with col2:
            if st.button("üîÑ Refresh", use_container_width=True):
                st.rerun()
        
        # Load horses
        horses = load_horses()
        
        if search_term:
            horses = [h for h in horses if 
                     search_term.lower() in h['name'].lower() or 
                     search_term.lower() in h['breed'].lower()]
        
        if horses:
            st.write(f"Found {len(horses)} horses")
            
            # Display horses in a grid
            for i in range(0, len(horses), 3):
                cols = st.columns(3)
                for j in range(3):
                    if i + j < len(horses):
                        horse = horses[i + j]
                        with cols[j]:
                            with st.container():
                                st.markdown(f"### {horse['name']}")
                                st.write(f"**Breed:** {horse.get('breed', 
'Unknown')}")
                                st.write(f"**Age:** {horse.get('age_years', 
'Unknown')} years")
                                st.write(f"**Color:** {horse.get('color', 
'Unknown')}")
                                st.write(f"**Gender:** {horse.get('gender', 
'Unknown')}")
                                
                                if horse.get('barn_name') and horse['barn_name'] != 
horse['name']:
                                    st.write(f"**Barn Name:** {horse['barn_name']}")
                                
                                if horse.get('notes'):
                                    st.write(f"**Notes:** 
{horse['notes'][:100]}{'...' if len(str(horse['notes'])) > 100 else ''}")
                                
                                # AI Analysis button
                                if st.button(f"ü§ñ Ask AI about {horse['name']}", 
key=f"ai_{horse['id']}"):
                                    with st.spinner(f"Analyzing 
{horse['name']}..."):
                                        analysis = get_ai_analysis(horse, "Provide a 
comprehensive analysis of this horse.")
                                        
                                        if analysis:
                                            st.markdown("### ü§ñ AI Analysis")
                                            st.markdown(analysis.get('analysis', 'No 
analysis available'))
                                
                                st.markdown("---")
        else:
            st.info("No horses found. Add some horses to get started!")
            
            # Show add horse button
            if st.button("‚ûï Add Your First Horse", use_container_width=True):
                st.session_state.active_tab = 1  # Switch to add horse tab
                st.rerun()
    
    with tab2:
        st.header("Add New Horse")
        
        with st.form("add_horse_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                name = st.text_input("Horse Name *", placeholder="e.g., Thunder 
Bay")
                barn_name = st.text_input("Barn/Call Name", placeholder="e.g., 
Thunder (optional)")
                breed = st.text_input("Breed *", placeholder="e.g., Thoroughbred")
                age_years = st.number_input("Age (Years) *", min_value=0, 
max_value=50, value=5)
                color = st.text_input("Color *", placeholder="e.g., Bay")
            
            with col2:
                gender = st.selectbox("Gender *", ["Mare", "Stallion", "Gelding"])
                height_hands = st.number_input("Height (Hands)", min_value=10.0, 
max_value=20.0, value=15.0, step=0.1, format="%.1f")
                weight_lbs = st.number_input("Weight (lbs)", min_value=200, 
max_value=2500, value=1000, step=50)
                owner_name = st.text_input("Owner Name", placeholder="e.g., John 
Smith")
                
            notes = st.text_area("Notes (Optional)", 
                                placeholder="Additional information about this 
horse...")
            
            submitted = st.form_submit_button("Add Horse", use_container_width=True)
            
            if submitted:
                if name and breed and age_years and color and gender:
                    horse_data = {
                        "name": name,
                        "barn_name": barn_name if barn_name else None,
                        "breed": breed,
                        "age_years": age_years,
                        "color": color,
                        "gender": gender,
                        "height_hands": height_hands,
                        "weight_lbs": weight_lbs,
                        "owner_name": owner_name if owner_name else None,
                        "notes": notes if notes else None
                    }
                    
                    new_horse = create_horse(horse_data)
                    if new_horse:
                        st.success(f"‚úÖ {name} has been added to your barn!")
                        st.balloons()
                        st.rerun()
                else:
                    st.error("Please fill in all required fields (marked with *)")
    
    with tab3:
        st.header("ü§ñ AI Horse Assistant")
        
        horses = load_horses()
        
        if horses:
            # Horse selection for specific analysis
            st.subheader("Analyze a Specific Horse")
            horse_names = {f"{h['name']} ({h.get('breed', 'Unknown breed')})": h for 
h in horses}
            selected_horse_name = st.selectbox("Choose a horse:", [""] + 
list(horse_names.keys()))
            
            if selected_horse_name:
                selected_horse = horse_names[selected_horse_name]
                
                question = st.text_area("What would you like to know about this 
horse?", 
                                      placeholder="e.g., What training regimen do 
you recommend?")
                
                if st.button("Get AI Analysis", use_container_width=True):
                    if question:
                        with st.spinner("Getting AI insights..."):
                            analysis = get_ai_analysis(selected_horse, question)
                            
                            if analysis:
                                st.markdown("### ü§ñ AI Response")
                                st.markdown(analysis.get('analysis', 'No analysis 
available'))
                    else:
                        st.error("Please enter a question")
            
            st.markdown("---")
            
        # General horse questions
        st.subheader("General Horse Questions")
        general_question = st.text_area("Ask any horse-related question:", 
                                      placeholder="e.g., What are signs of colic I 
should watch for?")
        
        if st.button("Ask AI", use_container_width=True):
            if general_question:
                with st.spinner("Getting AI insights..."):
                    # For general questions, we'll use the AI endpoint directly
                    try:
                        ai_data = {
                            "question": general_question
                        }
                        response = make_api_request('POST', 
'/api/v1/ai/general-question', json=ai_data)
                        
                        if response.status_code == 200:
                            analysis = response.json()
                            st.markdown("### ü§ñ AI Response")
                            st.markdown(analysis.get('analysis', 'No response 
available'))
                        else:
                            st.error("Failed to get AI response")
                    except Exception as e:
                        st.error(f"Failed to get AI response: {e}")
            else:
                st.error("Please enter a question")

    # Footer with barn info
    st.markdown("---")
    if current_org:
        st.caption(f"üè¢ Connected to: {current_org.get('org_name', 'Unknown')} | üë§ 
Role: {current_org.get('role', 'member').title()}")

if __name__ == "__main__":
    main()
