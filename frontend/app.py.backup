import streamlit as st
import requests
import pandas as pd
from datetime import date, datetime, timedelta
from typing import Optional, Dict, Any, List
import json

# Configure page
st.set_page_config(
    page_title="Barn Lady - Horse Management",
    page_icon="🐴",
    layout="wide",
    initial_sidebar_state="expanded"
)

# API Configuration
API_BASE_URL = "http://localhost:8000"

# Helper Functions
def api_request(method: str, endpoint: str, data: dict = None) -> dict:
    """Make API request with error handling"""
    url = f"{API_BASE_URL}{endpoint}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, params=data)
        elif method.upper() == "POST":
            response = requests.post(url, json=data)
        elif method.upper() == "PUT":
            response = requests.put(url, json=data)
        elif method.upper() == "DELETE":
            response = requests.delete(url)
        
        response.raise_for_status()
        return response.json() if response.content else {}
    
    except requests.exceptions.RequestException as e:
        st.error(f"API Error: {str(e)}")
        return {}

def format_date(date_obj) -> str:
    """Format date for display"""
    if isinstance(date_obj, str):
        try:
            date_obj = datetime.fromisoformat(date_obj.replace('Z', '+00:00')).date()
        except:
            return date_obj
    
    if date_obj:
        return date_obj.strftime("%B %d, %Y")
    return "Not specified"

# Main App
def main():
    st.title("🐴 Barn Lady - Horse Management")
    
    # Sidebar Navigation
    st.sidebar.title("Navigation")
    
    # Check if we should show horse profile or edit
    if 'selected_horse_id' in st.session_state and st.session_state.selected_horse_id:
        if 'edit_mode' in st.session_state and st.session_state.edit_mode:
            page = "Edit Horse"
        else:
            page = "Horse Profile"
    else:
        if 'ai_horse_id' in st.session_state and st.session_state.ai_horse_id:
            page = "🤖 AI Assistant"
        else:
            page = st.sidebar.selectbox(
                "Choose a page:",
                ["Horse Directory", "Add New Horse", "🤖 AI Assistant", "Reports"]
            )
    
    # Clear button in sidebar
    if st.sidebar.button("← Back to Directory"):
        if 'selected_horse_id' in st.session_state:
            del st.session_state['selected_horse_id']
        if 'edit_mode' in st.session_state:
            del st.session_state['edit_mode']
        st.rerun()
    
    # Route to appropriate page
    if page == "Horse Directory":
        show_horse_directory()
    elif page == "Add New Horse":
        show_add_horse_form()
    elif page == "Horse Profile":
        show_horse_profile()
    elif page == "Edit Horse":
        show_edit_horse_form()
    elif page == "🤖 AI Assistant":
        show_ai_assistant()
    elif page == "Reports":
        show_reports()

def show_horse_directory():
    """Display list of all horses with search and filtering"""
    st.header("🏠 Horse Directory")
    
    # Search and Filter Controls
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        search_term = st.text_input("🔍 Search horses", placeholder="Name, breed, owner...")
    
    with col2:
        active_only = st.checkbox("Active horses only", value=True)
    
    with col3:
        sort_by = st.selectbox("Sort by", ["name", "breed", "current_health_status"])
    
    with col4:
        sort_order = st.selectbox("Order", ["asc", "desc"])
    
    # Fetch horses
    params = {
        "search": search_term if search_term else None,
        "active_only": active_only,
        "sort_by": sort_by,
        "sort_order": sort_order,
        "limit": 100
    }
    
    horses = api_request("GET", "/api/v1/horses/", params)
    
    if not horses:
        st.warning("No horses found or unable to connect to API.")
        return
    
    # Display Summary Stats
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Horses", len(horses))
    
    with col2:
        active_horses = [h for h in horses if h.get('is_active', True)]
        st.metric("Active Horses", len(active_horses))
    
    with col3:
        retired_horses = [h for h in horses if h.get('is_retired', False)]
        st.metric("Retired Horses", len(retired_horses))
    
    with col4:
        for_sale_horses = [h for h in horses if h.get('is_for_sale', False)]
        st.metric("For Sale", len(for_sale_horses))
    
    st.divider()
    
    # Display Horses in Cards
    if horses:
        # Create responsive columns
        num_cols = 3
        cols = st.columns(num_cols)
        
        for idx, horse in enumerate(horses):
            col = cols[idx % num_cols]
            
            with col:
                # Horse Card
                status_color = {
                    "Excellent": "🟢",
                    "Good": "🟢", 
                    "Fair": "🟡",
                    "Poor": "🟠",
                    "Critical": "🔴"
                }.get(horse.get('current_health_status', 'Good'), "⚪")
                
                st.markdown(f"""
                <div style="border: 1px solid #ddd; border-radius: 10px; padding: 15px; margin: 10px 0; background-color: white;">
                    <h4>{horse.get('name', 'Unknown')} {status_color}</h4>
                    <p><strong>Barn Name:</strong> {horse.get('barn_name', 'N/A')}</p>
                    <p><strong>Breed:</strong> {horse.get('breed', 'Unknown')}</p>
                    <p><strong>Age:</strong> {horse.get('age_display', 'Unknown')}</p>
                    <p><strong>Location:</strong> {horse.get('current_location', 'Not specified')}</p>
                    <p><strong>Stall:</strong> {horse.get('stall_number', 'N/A')}</p>
                    <p><strong>Owner:</strong> {horse.get('owner_name', 'Not specified')}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Action buttons
                col_btn1, col_btn2, col_btn3 = st.columns(3)
                
                with col_btn1:
                    if st.button(f"👁️ View", key=f"view_{horse['id']}", use_container_width=True):
                        st.session_state['selected_horse_id'] = horse['id']
                        if 'edit_mode' in st.session_state:
                            del st.session_state['edit_mode']
                        st.rerun()
                
                with col_btn2:
                    if st.button(f"✏️ Edit", key=f"edit_{horse['id']}", use_container_width=True):
                        st.session_state['selected_horse_id'] = horse['id']
                        st.session_state['edit_mode'] = True
                        st.rerun()
                
                with col_btn3:
                    if st.button(f"🤖 Ask AI", key=f"ai_{horse['id']}", use_container_width=True):
                        st.session_state['ai_horse_id'] = horse['id']
                        st.session_state['ai_horse_name'] = horse['name']
                        st.rerun()

def show_ai_assistant():
    """AI Assistant page with multiple interaction modes"""
    st.header("🤖 AI Horse Care Assistant")
    
    st.markdown("""
    Welcome to your AI Horse Care Assistant! Ask questions about horse management, 
    get personalized recommendations for your horses, or compare different horses.
    """)
    
    # Check if we have a specific horse to analyze
    if 'ai_horse_id' in st.session_state and st.session_state.ai_horse_id:
        st.info(f"💡 Ready to analyze **{st.session_state.ai_horse_name}**! Ask a question below or get a full analysis.")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("🔍 Get Full AI Analysis", type="primary"):
                with st.spinner(f"Analyzing {st.session_state.ai_horse_name}..."):
                    result = api_request("POST", "/api/v1/ai/analyze-horse", {
                        "horse_id": st.session_state.ai_horse_id
                    })
                    
                    if result and 'response' in result:
                        st.subheader(f"🐴 AI Analysis for {st.session_state.ai_horse_name}")
                        st.write(result['response'])
                    else:
                        st.error("Failed to get AI analysis")
        
        with col2:
            if st.button("❌ Clear Horse Selection"):
                del st.session_state['ai_horse_id']
                del st.session_state['ai_horse_name']
                st.rerun()
    
    # Tabs for different AI interactions
    tab1, tab2, tab3, tab4 = st.tabs(["💬 Ask Question", "🔍 Horse Analysis", "⚖️ Compare Horses", "📚 General Questions"])
    
    with tab1:
        st.subheader("💬 Ask About a Specific Horse")
        
        # Horse selection for questions
        horses = api_request("GET", "/api/v1/horses/")
        if horses:
            # Use pre-selected horse or let user choose
            if 'ai_horse_id' in st.session_state:
                selected_horse_id = st.session_state.ai_horse_id
                selected_horse_name = st.session_state.ai_horse_name
                st.write(f"**Selected Horse:** {selected_horse_name}")
            else:
                horse_options = {f"{h['name']} ({h.get('breed', 'Unknown')})": h['id'] for h in horses}
                if horse_options:
                    selected_horse_display = st.selectbox("Select a horse:", [""] + list(horse_options.keys()))
                    if selected_horse_display:
                        selected_horse_id = horse_options[selected_horse_display]
                        selected_horse_name = selected_horse_display.split(" (")[0]
                    else:
                        selected_horse_id = None
                        selected_horse_name = None
                else:
                    st.warning("No horses found")
                    selected_horse_id = None
                    selected_horse_name = None
            
            if selected_horse_id:
                question = st.text_area(
                    f"Ask a question about {selected_horse_name}:",
                    placeholder="e.g., What feeding schedule do you recommend? How should I manage their training? What health issues should I watch for?",
                    height=100
                )
                
                if st.button("🤖 Get AI Response", type="primary"):
                    if question:
                        with st.spinner("Getting AI response..."):
                            result = api_request("POST", "/api/v1/ai/analyze-horse", {
                                "horse_id": selected_horse_id,
                                "question": question
                            })
                            
                            if result and 'response' in result:
                                st.subheader(f"🤖 AI Response about {selected_horse_name}")
                                st.write(result['response'])
                            else:
                                st.error("Failed to get AI response")
                    else:
                        st.warning("Please enter a question")
    
    with tab2:
        st.subheader("🔍 Get Full Horse Analysis")
        
        horses = api_request("GET", "/api/v1/horses/")
        if horses:
            horse_options = {f"{h['name']} ({h.get('breed', 'Unknown')})": h['id'] for h in horses}
            if horse_options:
                selected_horse_display = st.selectbox("Select a horse for analysis:", [""] + list(horse_options.keys()), key="analysis_horse")
                
                if selected_horse_display:
                    selected_horse_id = horse_options[selected_horse_display]
                    selected_horse_name = selected_horse_display.split(" (")[0]
                    
                    if st.button("🔍 Analyze This Horse", type="primary"):
                        with st.spinner(f"Analyzing {selected_horse_name}..."):
                            result = api_request("POST", "/api/v1/ai/analyze-horse", {
                                "horse_id": selected_horse_id
                            })
                            
                            if result and 'response' in result:
                                st.subheader(f"🐴 Complete AI Analysis for {selected_horse_name}")
                                st.write(result['response'])
                            else:
                                st.error("Failed to get AI analysis")
    
    with tab3:
        st.subheader("⚖️ Compare Multiple Horses")
        
        horses = api_request("GET", "/api/v1/horses/")
        if horses:
            horse_options = {f"{h['name']} ({h.get('breed', 'Unknown')})": h['id'] for h in horses}
            
            selected_horses = st.multiselect(
                "Select horses to compare (minimum 2):",
                list(horse_options.keys())
            )
            
            if len(selected_horses) >= 2:
                comparison_question = st.text_area(
                    "Specific comparison question (optional):",
                    placeholder="e.g., Which horse would be better for a beginner rider? How should I adjust their feeding schedules?",
                    height=80
                )
                
                if st.button("🤖 Compare Horses", type="primary"):
                    selected_ids = [horse_options[horse] for horse in selected_horses]
                    
                    with st.spinner("Comparing horses..."):
                        result = api_request("POST", "/api/v1/ai/compare-horses", {
                            "horse_ids": selected_ids,
                            "comparison_question": comparison_question if comparison_question else None
                        })
                        
                        if result and 'response' in result:
                            st.subheader("🤖 AI Horse Comparison")
                            st.write(result['response'])
                        else:
                            st.error("Failed to get comparison")
            elif selected_horses:
                st.info("Please select at least 2 horses to compare")
    
    with tab4:
        st.subheader("📚 General Horse Management Questions")
        
        general_question = st.text_area(
            "Ask any general horse management question:",
            placeholder="e.g., What's the best way to introduce a new horse to the herd? How often should I have the vet check my horses? What are signs of colic?",
            height=100
        )
        
        include_context = st.checkbox("Include my barn's horses for context", value=True)
        
        if st.button("🤖 Get Expert Advice", type="primary"):
            if general_question:
                with st.spinner("Getting expert advice..."):
                    result = api_request("POST", "/api/v1/ai/general-question", {
                        "question": general_question,
                        "include_barn_context": include_context
                    })
                    
                    if result and 'response' in result:
                        st.subheader("🤖 Expert Advice")
                        st.write(result['response'])
                    else:
                        st.error("Failed to get advice")
            else:
                st.warning("Please enter a question")

def show_horse_profile():
    """Display detailed horse profile"""
    horse_id = st.session_state.get('selected_horse_id')
    
    if not horse_id:
        st.error("No horse selected. Please go back to the directory.")
        return
    
    # Fetch FULL horse details using individual endpoint
    horse = api_request("GET", f"/api/v1/horses/{horse_id}")
    
    if not horse:
        st.error("Horse not found or unable to load profile.")
        return
    
    # Horse Header
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.title(f"🐴 {horse.get('name', 'Unknown')}")
        if horse.get('barn_name') and horse['barn_name'] != horse['name']:
            st.subheader(f"'{horse['barn_name']}'")
    
    with col2:
        status_color = {
            "Excellent": "🟢 Excellent",
            "Good": "🟢 Good", 
            "Fair": "🟡 Fair",
            "Poor": "🟠 Poor",
            "Critical": "🔴 Critical"
        }.get(horse.get('current_health_status', 'Good'), "⚪ Unknown")
        
        st.metric("Health Status", status_color)
    
    with col3:
        col_back, col_edit, col_ai = st.columns(3)
        with col_back:
            if st.button("🏠", help="Back to Directory", use_container_width=True):
                del st.session_state['selected_horse_id']
                st.rerun()
        with col_edit:
            if st.button("✏️", help="Edit Horse", use_container_width=True):
                st.session_state['edit_mode'] = True
                st.rerun()
        with col_ai:
            if st.button("🤖", help="Ask AI", type="primary", use_container_width=True):
                st.session_state['ai_horse_id'] = horse_id
                st.session_state['ai_horse_name'] = horse['name']
                st.rerun()
    
    st.divider()
    
    # Horse Information Tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["📋 Basic Info", "📏 Physical", "🏠 Management", "🏥 Health", "📝 Notes"])
    
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Identity")
            st.write(f"**Name:** {horse.get('name', 'Not specified')}")
            st.write(f"**Barn Name:** {horse.get('barn_name', 'Not specified')}")
            st.write(f"**Breed:** {horse.get('breed', 'Not specified')}")
            st.write(f"**Color:** {horse.get('color', 'Not specified')}")
            st.write(f"**Gender:** {horse.get('gender', 'Not specified')}")
            st.write(f"**Age:** {horse.get('age_display', 'Unknown')}")
        
        with col2:
            st.subheader("Registration")
            st.write(f"**Registration #:** {horse.get('registration_number', 'Not registered')}")
            st.write(f"**Registry:** {horse.get('registration_organization', 'Not specified')}")
            st.write(f"**Microchip:** {horse.get('microchip_number', 'Not specified')}")
            st.write(f"**Passport #:** {horse.get('passport_number', 'Not specified')}")
            
            st.subheader("Status")
            status_items = []
            if horse.get('is_active', True):
                status_items.append("✅ Active")
            if horse.get('is_retired', False):
                status_items.append("🏖️ Retired")
            if horse.get('is_for_sale', False):
                status_items.append("💰 For Sale")
            
            for item in status_items:
                st.write(item)
    
    with tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Physical Characteristics")
            height = horse.get('height_hands')
            if height:
                st.metric("Height", f"{height} hands")
            
            weight = horse.get('weight_lbs')
            if weight:
                st.metric("Weight", f"{weight} lbs")
            
            bcs = horse.get('body_condition_score')
            if bcs:
                st.metric("Body Condition Score", f"{bcs}/9")
        
        with col2:
            st.subheader("Markings & Features")
            markings = horse.get('markings', 'No special markings noted')
            st.write(markings)
    
    with tab3:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Location & Boarding")
            st.write(f"**Current Location:** {horse.get('current_location', 'Not specified')}")
            st.write(f"**Stall/Paddock:** {horse.get('stall_number', 'Not specified')}")
            st.write(f"**Pasture Group:** {horse.get('pasture_group', 'Not specified')}")
            st.write(f"**Boarding Type:** {horse.get('boarding_type', 'Not specified')}")
            
            st.subheader("Owner Information")
            st.write(f"**Owner:** {horse.get('owner_name', 'Not specified')}")
            owner_contact = horse.get('owner_contact')
            if owner_contact:
                st.write(f"**Contact:** {owner_contact}")
        
        with col2:
            st.subheader("Training")
            st.write(f"**Training Level:** {horse.get('training_level', 'Not specified')}")
            st.write(f"**Disciplines:** {horse.get('disciplines', 'Not specified')}")
            st.write(f"**Trainer:** {horse.get('trainer_name', 'Not specified')}")
            trainer_contact = horse.get('trainer_contact')
            if trainer_contact:
                st.write(f"**Trainer Contact:** {trainer_contact}")
    
    with tab4:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Current Health")
            st.write(f"**Status:** {horse.get('current_health_status', 'Good')}")
            
            allergies = horse.get('allergies')
            if allergies:
                st.write(f"**Allergies:** {allergies}")
            else:
                st.write("**Allergies:** None specified")
            
            medications = horse.get('medications')
            if medications:
                st.write(f"**Current Medications:** {medications}")
            else:
                st.write("**Current Medications:** None specified")
            
            special_needs = horse.get('special_needs')
            if special_needs:
                st.write(f"**Special Needs:** {special_needs}")
        
        with col2:
            st.subheader("Veterinary Contact")
            st.write(f"**Primary Vet:** {horse.get('veterinarian_name', 'Not specified')}")
            vet_contact = horse.get('veterinarian_contact')
            if vet_contact:
                st.write(f"**Vet Contact:** {vet_contact}")
            
            st.subheader("Emergency Contact")
            st.write(f"**Emergency Contact:** {horse.get('emergency_contact_name', 'Not specified')}")
            emergency_phone = horse.get('emergency_contact_phone')
            if emergency_phone:
                st.write(f"**Emergency Phone:** {emergency_phone}")

    with tab5:
        st.subheader("Notes & Instructions")
        
        notes = horse.get('notes')
        if notes:
            st.write("**General Notes:**")
            st.write(notes)
        else:
            st.write("**General Notes:** No notes recorded")
        
        instructions = horse.get('special_instructions')
        if instructions:
            st.write("**Special Instructions:**")
            st.write(instructions)
        else:
            st.write("**Special Instructions:** No special instructions")
        
        # Record Information
        st.subheader("Record Information")
        created_at = horse.get('created_at')
        if created_at:
            st.write(f"**Added to system:** {format_date(created_at)}")
        
        updated_at = horse.get('updated_at')
        if updated_at:
            st.write(f"**Last updated:** {format_date(updated_at)}")

def show_edit_horse_form():
    """Form to edit an existing horse"""
    horse_id = st.session_state.get('selected_horse_id')
    
    if not horse_id:
        st.error("No horse selected for editing.")
        return
    
    # Fetch current horse data
    horse = api_request("GET", f"/api/v1/horses/{horse_id}")
    
    if not horse:
        st.error("Horse not found.")
        return
    
    st.header(f"✏️ Edit {horse.get('name', 'Horse')}")
    
    with st.form("edit_horse_form"):
        # Basic Information
        st.subheader("📋 Basic Information")
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Horse Name*", value=horse.get('name', ''))
            barn_name = st.text_input("Barn/Call Name", value=horse.get('barn_name', '') or '')
            breed = st.text_input("Breed", value=horse.get('breed', '') or '')
            color = st.text_input("Color", value=horse.get('color', '') or '')
            
        with col2:
            gender_options = ["", "Mare", "Stallion", "Gelding"]
            gender_index = 0
            if horse.get('gender') in gender_options:
                gender_index = gender_options.index(horse.get('gender'))
            gender = st.selectbox("Gender", gender_options, index=gender_index)
            
            age_years = st.number_input("Age (years)", min_value=0, max_value=50, 
                                       value=horse.get('age_years') or 0)
            height_hands = st.number_input("Height (hands)", min_value=8.0, max_value=22.0, step=0.1, 
                                          value=float(horse.get('height_hands', 0)) if horse.get('height_hands') else 0.0)
            weight_lbs = st.number_input("Weight (lbs)", min_value=200, max_value=3000, step=25, 
                                        value=horse.get('weight_lbs') or 0)
        
        # Location Information
        st.subheader("🏠 Location & Management")
        col1, col2 = st.columns(2)
        
        with col1:
            current_location = st.text_input("Current Location/Facility", value=horse.get('current_location', '') or '')
            stall_number = st.text_input("Stall/Paddock Number", value=horse.get('stall_number', '') or '')
            
        with col2:
            owner_name = st.text_input("Owner Name", value=horse.get('owner_name', '') or '')
            boarding_options = ["", "Full Care", "Partial Care", "Self Care", "Pasture Board"]
            boarding_index = 0
            if horse.get('boarding_type') in boarding_options:
                boarding_index = boarding_options.index(horse.get('boarding_type'))
            boarding_type = st.selectbox("Boarding Type", boarding_options, index=boarding_index)
        
        # Health Information
        st.subheader("🏥 Health Information")
        col1, col2 = st.columns(2)
        
        with col1:
            health_options = ["Good", "Excellent", "Fair", "Poor", "Critical"]
            health_index = 0
            if horse.get('current_health_status') in health_options:
                health_index = health_options.index(horse.get('current_health_status'))
            current_health_status = st.selectbox("Current Health Status", health_options, index=health_index)
            
            veterinarian_name = st.text_input("Primary Veterinarian", value=horse.get('veterinarian_name', '') or '')
            
        with col2:
            allergies = st.text_area("Known Allergies", value=horse.get('allergies', '') or '', height=80)
            medications = st.text_area("Current Medications", value=horse.get('medications', '') or '', height=80)
        
        # Notes
        st.subheader("📝 Additional Information")
        notes = st.text_area("General Notes", value=horse.get('notes', '') or '', height=100)
        
        # Status checkboxes
        st.subheader("Status")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            is_active = st.checkbox("Active", value=horse.get('is_active', True))
        with col2:
            is_retired = st.checkbox("Retired", value=horse.get('is_retired', False))
        with col3:
            is_for_sale = st.checkbox("For Sale", value=horse.get('is_for_sale', False))
        
        # Submit buttons
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            submitted = st.form_submit_button("💾 Save Changes", type="primary")
        
        with col2:
            cancel = st.form_submit_button("❌ Cancel")
        
        if cancel:
            del st.session_state['edit_mode']
            st.rerun()
        
        if submitted:
            if not name:
                st.error("Horse name is required!")
                return
            
            # Prepare update data
            update_data = {
                "name": name,
                "barn_name": barn_name if barn_name else None,
                "breed": breed if breed else None,
                "color": color if color else None,
                "gender": gender if gender else None,
                "age_years": int(age_years) if age_years else None,
                "height_hands": height_hands if height_hands else None,
                "weight_lbs": int(weight_lbs) if weight_lbs else None,
                "owner_name": owner_name if owner_name else None,
                "current_location": current_location if current_location else None,
                "stall_number": stall_number if stall_number else None,
                "boarding_type": boarding_type if boarding_type else None,
                "current_health_status": current_health_status,
                "veterinarian_name": veterinarian_name if veterinarian_name else None,
                "allergies": allergies if allergies else None,
                "medications": medications if medications else None,
                "notes": notes if notes else None,
                "is_active": is_active,
                "is_retired": is_retired,
                "is_for_sale": is_for_sale
            }
            
            # Submit to API
            result = api_request("PUT", f"/api/v1/horses/{horse_id}", update_data)
            
            if result:
                st.success(f"✅ Successfully updated {name}!")
                del st.session_state['edit_mode']
                st.rerun()
            else:
                st.error("Failed to update horse. Please try again.")

def show_add_horse_form():
    """Form to add a new horse"""
    st.header("➕ Add New Horse")
    
    with st.form("add_horse_form", clear_on_submit=True):
        # Basic Information
        st.subheader("📋 Basic Information")
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Horse Name*", help="Registered name")
            barn_name = st.text_input("Barn/Call Name", help="Nickname or barn call name")
            breed = st.text_input("Breed")
            color = st.text_input("Color")
            
        with col2:
            gender = st.selectbox("Gender", ["", "Mare", "Stallion", "Gelding"])
            age_years = st.number_input("Age (years)", min_value=0, max_value=50, value=None)
            height_hands = st.number_input("Height (hands)", min_value=8.0, max_value=22.0, step=0.1, value=None)
            weight_lbs = st.number_input("Weight (lbs)", min_value=200, max_value=3000, step=25, value=None)
        
        # Location Information
        st.subheader("🏠 Location & Management")
        col1, col2 = st.columns(2)
        
        with col1:
            current_location = st.text_input("Current Location/Facility")
            stall_number = st.text_input("Stall/Paddock Number")
            
        with col2:
            owner_name = st.text_input("Owner Name")
            boarding_type = st.selectbox("Boarding Type", ["", "Full Care", "Partial Care", "Self Care", "Pasture Board"])
        
        # Health Information
        st.subheader("🏥 Health Information")
        col1, col2 = st.columns(2)
        
        with col1:
            current_health_status = st.selectbox("Current Health Status", 
                                               ["Good", "Excellent", "Fair", "Poor", "Critical"])
            veterinarian_name = st.text_input("Primary Veterinarian")
            
        with col2:
            allergies = st.text_area("Known Allergies", height=80)
            medications = st.text_area("Current Medications", height=80)
        
        # Notes
        st.subheader("📝 Additional Information")
        notes = st.text_area("General Notes", height=100, 
                             help="Any additional information about this horse")
        
        # Submit button
        submitted = st.form_submit_button("🐴 Add Horse", type="primary")
        
        if submitted:
            if not name:
                st.error("Horse name is required!")
                return
            
            # Prepare data
            horse_data = {
                "name": name,
                "barn_name": barn_name if barn_name else None,
                "breed": breed if breed else None,
                "color": color if color else None,
                "gender": gender if gender else None,
                "age_years": int(age_years) if age_years else None,
                "height_hands": height_hands,
                "weight_lbs": int(weight_lbs) if weight_lbs else None,
                "owner_name": owner_name if owner_name else None,
                "current_location": current_location if current_location else None,
                "stall_number": stall_number if stall_number else None,
                "boarding_type": boarding_type if boarding_type else None,
                "current_health_status": current_health_status,
                "veterinarian_name": veterinarian_name if veterinarian_name else None,
                "allergies": allergies if allergies else None,
                "medications": medications if medications else None,
                "notes": notes if notes else None,
                "is_active": True,
                "is_retired": False,
                "is_for_sale": False
            }
            
            # Submit to API
            result = api_request("POST", "/api/v1/horses/", horse_data)
            
            if result:
                st.success(f"✅ Successfully added {name} to the barn!")
                st.balloons()
                st.info("Horse has been added! Go to Horse Directory to see all horses.")
            else:
                st.error("Failed to add horse. Please check your inputs and try again.")

def show_reports():
    """Display reports and analytics"""
    st.header("📊 Reports & Analytics")
    st.info("Reports and analytics will be implemented in future phases.")

if __name__ == "__main__":
    main()
