from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import or_, and_, desc, asc
from typing import List, Optional, Dict, Any
from datetime import date, datetime
import logging

from app.database import get_db
from app.models.horse import Horse
# from app.models.health import HealthRecord, FeedingRecord  # We'll add this back later
from app.schemas.horse import (
    HorseCreate, HorseUpdate, HorseResponse, HorseListResponse,
)

# Set up logging
logger = logging.getLogger(__name__)

# Create router
router = APIRouter(prefix="/api/v1/horses", tags=["horses"])

# Horse CRUD Operations

@router.get("/", response_model=List[HorseListResponse])
async def get_horses(
    skip: int = Query(0, ge=0, description="Number of records to skip"),
    limit: int = Query(100, ge=1, le=1000, description="Maximum number of records to return"),
    search: Optional[str] = Query(None, description="Search by name, breed, or registration number"),
    active_only: bool = Query(True, description="Return only active horses"),
    sort_by: str = Query("name", description="Field to sort by"),
    sort_order: str = Query("asc", regex="^(asc|desc)$", description="Sort order"),
    organization_id: Optional[str] = Query(None, description="Filter by organization"),
    db: Session = Depends(get_db)
):
    """
    Get list of horses with optional filtering and search
    """
    try:
        # Build base query
        query = db.query(Horse)
        
        # Apply filters
        if active_only:
            query = query.filter(Horse.is_active == True)
        
        if organization_id:
            query = query.filter(Horse.organization_id == organization_id)
        
        # Apply search
        if search:
            search_filter = or_(
                Horse.name.ilike(f"%{search}%"),
                Horse.barn_name.ilike(f"%{search}%"),
                Horse.breed.ilike(f"%{search}%"),
                Horse.registration_number.ilike(f"%{search}%"),
                Horse.owner_name.ilike(f"%{search}%")
            )
            query = query.filter(search_filter)
        
        # Apply sorting
        sort_column = getattr(Horse, sort_by, Horse.name)
        if sort_order == "desc":
            query = query.order_by(desc(sort_column))
        else:
            query = query.order_by(asc(sort_column))
        
        # Apply pagination
        horses = query.offset(skip).limit(limit).all()
        
        logger.info(f"Retrieved {len(horses)} horses")
        return horses
        
    except Exception as e:
        logger.error(f"Error retrieving horses: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve horses"
        )


@router.get("/{horse_id}", response_model=HorseResponse)
async def get_horse(horse_id: int, db: Session = Depends(get_db)):
    """
    Get a specific horse by ID with related records
    """
    try:
        horse = db.query(Horse).filter(Horse.id == horse_id).first()
        
        if not horse:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Horse with ID {horse_id} not found"
            )
        
        logger.info(f"Retrieved horse: {horse.name}")
        return horse
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error retrieving horse {horse_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve horse"
        )


@router.post("/", response_model=HorseResponse, status_code=status.HTTP_201_CREATED)
async def create_horse(horse: HorseCreate, db: Session = Depends(get_db)):
    """
    Create a new horse record
    """
    try:
        # Create new horse instance
        db_horse = Horse(**horse.dict())
        
        # Set creation metadata
        db_horse.created_at = datetime.utcnow()
        
        # Add to database
        db.add(db_horse)
        db.commit()
        db.refresh(db_horse)
        
        logger.info(f"Created new horse: {db_horse.name} (ID: {db_horse.id})")
        return db_horse
        
    except Exception as e:
        db.rollback()
        logger.error(f"Error creating horse: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to create horse"
        )


@router.put("/{horse_id}", response_model=HorseResponse)
async def update_horse(
    horse_id: int, 
    horse_update: HorseUpdate, 
    db: Session = Depends(get_db)
):
    """
    Update an existing horse record
    """
    try:
        # Get existing horse
        db_horse = db.query(Horse).filter(Horse.id == horse_id).first()
        if not db_horse:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Horse with ID {horse_id} not found"
            )
        
        # Update fields
        update_data = horse_update.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(db_horse, field, value)
        
        # Set update timestamp
        db_horse.updated_at = datetime.utcnow()
        
        # Commit changes
        db.commit()
        db.refresh(db_horse)
        
        logger.info(f"Updated horse: {db_horse.name} (ID: {db_horse.id})")
        return db_horse
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"Error updating horse {horse_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update horse"
        )


@router.delete("/{horse_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_horse(horse_id: int, db: Session = Depends(get_db)):
    """
    Delete a horse record (soft delete by setting is_active to False)
    """
    try:
        # Get existing horse
        db_horse = db.query(Horse).filter(Horse.id == horse_id).first()
        if not db_horse:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Horse with ID {horse_id} not found"
            )
        
        # Soft delete
        db_horse.is_active = False
        db_horse.updated_at = datetime.utcnow()
        
        # Commit changes
        db.commit()
        
        logger.info(f"Deleted horse: {db_horse.name} (ID: {db_horse.id})")
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        logger.error(f"Error deleting horse {horse_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to delete horse"
        )


# Statistics and Summary Endpoints

@router.get("/{horse_id}/summary", response_model=Dict[str, Any])
async def get_horse_summary(horse_id: int, db: Session = Depends(get_db)):
    """
    Get a summary of horse information including recent health records and statistics
    """
    try:
        # Get horse
        horse = db.query(Horse).filter(Horse.id == horse_id).first()
        
        if not horse:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Horse with ID {horse_id} not found"
            )
        
        # Calculate summary statistics
        summary = {
            "horse": horse.to_dict(),
            "statistics": {
                "total_health_records": 0,  # We'll add this back later
                "recent_health_records_count": 0,
            },
            "recent_health_records": [],
        }
        
        logger.info(f"Generated summary for horse {horse_id}")
        return summary
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error generating summary for horse {horse_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to generate horse summary"
        )
